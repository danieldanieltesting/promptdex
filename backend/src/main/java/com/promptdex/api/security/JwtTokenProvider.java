package com.promptdex.api.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority; // <<< --- ADDED IMPORT
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.List; // <<< --- ADDED IMPORT
import java.util.function.Function;
import java.util.stream.Collectors; // <<< --- ADDED IMPORT

@Component
public class JwtTokenProvider {

    @Value("${jwt.secret}")
    private String jwtSecret; // Ensure this is a strong, base64-encoded secret of sufficient length

    // Consider making this configurable via application.properties
    @Value("${jwt.expirationInMs:86400000}") // Default to 24 hours (86400000 ms)
    private long jwtExpirationInMs;

    // Constructor not strictly needed if fields are @Value injected and no other init logic.
    // public JwtTokenProvider() {}

    private SecretKey getSigningKey() {
        // It's good practice to decode the secret if it's Base64 encoded in properties
        // For HMAC-SHA keys, the byte array length should correspond to the algorithm (e.g., 32 bytes for HS256)
        // Ensure jwtSecret is strong enough.
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }

    public String generateToken(Authentication authentication) {
        UserPrincipal userPrincipal = (UserPrincipal) authentication.getPrincipal();
        String username = userPrincipal.getUsername();

        // --- MODIFICATION: Extract roles ---
        List<String> roles = userPrincipal.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toList());
        // --- END MODIFICATION ---

        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

        // --- MODIFICATION: Add roles claim ---
        return Jwts.builder()
                .subject(username)
                .claim("roles", roles) // Add roles as a custom claim
                .issuedAt(now)
                .expiration(expiryDate)
                .signWith(getSigningKey()) // Use the private helper for key
                .compact();
        // --- END MODIFICATION ---
    }

    // This method might be deprecated if generateToken(Authentication) is always used,
    // or it could be enhanced to also accept roles if called directly.
    // For now, keeping it as is, but primary token generation should use the Authentication object.
    public String generateTokenFromUsername(String username) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);

        // If this method is used, it won't include roles unless explicitly passed.
        // Consider if this method is still needed or how it should handle roles.
        return Jwts.builder()
                .subject(username)
                .issuedAt(now)
                .expiration(expiryDate)
                .signWith(getSigningKey())
                .compact();
    }

    public String getUsernameFromJWT(String token) {
        return getClaimFromToken(token, Claims::getSubject);
    }

    // --- NEW METHOD to get roles from JWT ---
    @SuppressWarnings("unchecked") // For the cast of claims.get("roles")
    public List<String> getRolesFromJWT(String token) {
        Claims claims = Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
        // Roles claim might be missing if token was generated by an older version or another system
        return claims.get("roles", List.class);
    }
    // --- END NEW METHOD ---


    public boolean validateToken(String authToken) {
        try {
            Jwts.parser().verifyWith(getSigningKey()).build().parseSignedClaims(authToken);
            return true;
        } catch (io.jsonwebtoken.security.SecurityException ex) {
            // Log.error("Invalid JWT signature");
        } catch (io.jsonwebtoken.MalformedJwtException ex) {
            // Log.error("Invalid JWT token");
        } catch (io.jsonwebtoken.ExpiredJwtException ex) {
            // Log.error("Expired JWT token");
        } catch (io.jsonwebtoken.UnsupportedJwtException ex) {
            // Log.error("Unsupported JWT token");
        } catch (IllegalArgumentException ex) {
            // Log.error("JWT claims string is empty.");
        }
        return false;
    }

    private <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
        return claimsResolver.apply(claims);
    }
}